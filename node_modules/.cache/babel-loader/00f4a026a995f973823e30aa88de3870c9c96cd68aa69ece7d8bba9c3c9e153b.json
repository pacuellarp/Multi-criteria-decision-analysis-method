{"ast":null,"code":"var _jsxFileName = \"/home/phoenix/Documentos/2023 II/Multi-criteria-decision-analysis-method/src/components/matrix/matrix.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const parseFraction = fraction => {\n  if (!fraction) return 0;\n  const parts = fraction.split('/');\n  if (parts.length === 2) {\n    const numerator = parseFloat(parts[0]);\n    const denominator = parseFloat(parts[1]);\n    if (denominator !== 0) {\n      return numerator / denominator;\n    }\n  }\n  return parseFloat(fraction);\n};\nconst Matrix = ({\n  size,\n  id,\n  onUpdate,\n  names\n}) => {\n  _s();\n  const [matrix, setMatrix] = useState(Array.from({\n    length: size\n  }, (_, rowIndex) => Array.from({\n    length: size\n  }, (_, colIndex) => rowIndex === colIndex ? '1' : '')));\n  useEffect(() => {\n    // Set the ID of the table element\n    const table = document.getElementById(`table-${id}`);\n    if (table) {\n      table.id = `table-${id}`;\n    }\n  }, [id]);\n  const handleInputChange = (e, rowIndex, colIndex) => {\n    const {\n      value\n    } = e.target;\n\n    // Convert input value to decimal\n    const decimalValue = parseFraction(value);\n    console.log(value);\n    console.log(decimalValue);\n    console.log(decimalValue.toString());\n    const updatedMatrix = [...matrix];\n    updatedMatrix[rowIndex][colIndex] = value;\n\n    // Check if the entered value is not 0\n    if (decimalValue !== 0) {\n      // Calculate the reciprocal and set it in the opposite cell\n      const reciprocal = 1 / decimalValue;\n      updatedMatrix[colIndex][rowIndex] = reciprocal.toString();\n    } else {\n      // If entered value is 0 or empty, set the opposite cell as empty\n      updatedMatrix[colIndex][rowIndex] = '';\n    }\n    setMatrix(updatedMatrix);\n    onUpdate(updatedMatrix, id);\n    console.log(`Matrix with id ${id} updated:`, updatedMatrix);\n  };\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), \" \", names.map((nombre, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: nombre\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), matrix.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: names[rowIndex]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: cell,\n            onChange: e => handleInputChange(e, rowIndex, colIndex),\n            readOnly: rowIndex === colIndex,\n            onBlur: e => {\n              e.target.value = parseFraction(e.target.value).toString();\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this)\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }, this))]\n      }, rowIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(Matrix, \"H4LppslpuwK0jbAxJ7wY+lYjOwY=\");\n_c = Matrix;\nexport default Matrix;\nvar _c;\n$RefreshReg$(_c, \"Matrix\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","parseFraction","fraction","parts","split","length","numerator","parseFloat","denominator","Matrix","size","id","onUpdate","names","_s","matrix","setMatrix","Array","from","_","rowIndex","colIndex","table","document","getElementById","handleInputChange","e","value","target","decimalValue","console","log","toString","updatedMatrix","reciprocal","children","fileName","_jsxFileName","lineNumber","columnNumber","map","nombre","index","row","cell","type","onChange","readOnly","onBlur","_c","$RefreshReg$"],"sources":["/home/phoenix/Documentos/2023 II/Multi-criteria-decision-analysis-method/src/components/matrix/matrix.js"],"sourcesContent":["import React, { useState, useEffect} from 'react';\n\nexport const parseFraction = (fraction) => {\n  if (!fraction) return 0;\n  const parts = fraction.split('/');\n  if (parts.length === 2) {\n    const numerator = parseFloat(parts[0]);\n    const denominator = parseFloat(parts[1]);\n    if (denominator !== 0) {\n      return numerator / denominator;\n    }\n  }\n  return parseFloat(fraction);\n};\n\n\nconst Matrix = ({ size, id, onUpdate, names }) => {\n  const [matrix, setMatrix] = useState(\n    Array.from({ length: size }, (_, rowIndex) =>\n      Array.from({ length: size }, (_, colIndex) =>\n        rowIndex === colIndex ? '1' : ''\n      )\n    )\n  );\n\n    \n  useEffect(() => {\n    // Set the ID of the table element\n    const table = document.getElementById(`table-${id}`);\n    if (table) {\n      table.id = `table-${id}`;\n    }\n  }, [id]);\n\n\n  const handleInputChange = (e, rowIndex, colIndex) => {\n    const { value } = e.target;\n\n    // Convert input value to decimal\n    const decimalValue = parseFraction(value);\n\n    console.log(value)\n    console.log(decimalValue)\n    console.log(decimalValue.toString())\n\n    const updatedMatrix = [...matrix];\n    updatedMatrix[rowIndex][colIndex] = value;\n\n\n    // Check if the entered value is not 0\n    if (decimalValue !== 0) {\n      // Calculate the reciprocal and set it in the opposite cell\n      const reciprocal = 1 / decimalValue;\n      updatedMatrix[colIndex][rowIndex] = reciprocal.toString();\n    } else {\n      // If entered value is 0 or empty, set the opposite cell as empty\n      updatedMatrix[colIndex][rowIndex] = '';\n    }\n\n    setMatrix(updatedMatrix);\n    onUpdate(updatedMatrix, id);\n    console.log(`Matrix with id ${id} updated:`, updatedMatrix);\n  };\n\n\n  return (\n    <table>\n      <tbody>\n        {/* Agrega una fila adicional para los nombres de las columnas */}\n        <tr>\n          <td></td> {/* Celda vacÃ­a en la esquina superior izquierda */}\n          {names.map((nombre, index) => (\n            <td key={index}>{nombre}</td>\n          ))}\n        </tr>\n        {matrix.map((row, rowIndex) => (\n          <tr key={rowIndex}>\n            {/* Agrega una celda para los nombres de las filas */}\n            <td>{names[rowIndex]}</td>\n            {row.map((cell, colIndex) => (\n              <td key={colIndex}>\n                <input\n                  type=\"text\"\n                  value={cell}\n                  onChange={(e) => handleInputChange(e, rowIndex, colIndex)}\n                  readOnly={rowIndex === colIndex}\n                  onBlur={(e) => {\n                    e.target.value = parseFraction(e.target.value).toString();\n                  }}\n                />\n              </td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Matrix;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}