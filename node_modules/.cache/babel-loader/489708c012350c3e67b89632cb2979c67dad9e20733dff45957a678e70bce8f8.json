{"ast":null,"code":"var _jsxFileName = \"/home/phoenix/Documentos/2023 II/Multi-criteria-decision-analysis-method/src/components/topsis/topsis.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport MatrixTOPSIS from \"../matrixTOPSIS/matrixTOPSIS\";\nimport { parseFraction } from \"../matrixTOPSIS/matrixTOPSIS\";\nimport CriterosAlternativas from \"../criterosAlternativas/criterosAlternativas\";\nimport OrderTable from \"../tendencyTable/tendencyTable\";\nimport MatrixOperationsTOPSIS from \"../matrixOperationsTOPSIS/matrixOperationsTOPSIS\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TOPSIS = () => {\n  _s();\n  const [numCriterios, setNumCriterios] = useState(2);\n  const [numAlternativas, setNumAlternativas] = useState(2);\n  const [matrices, setMatrices] = useState([]);\n  const [mostrarMatrixOperations, setMostrarMatrixOperations] = useState(false);\n  const [namesCriterios, setNamesCriterios] = useState([]);\n  const [namesAlternativas, setNamesAlternativas] = useState([]);\n  const [matricesTitles, setMatricesTitles] = useState(\"\");\n  const [mostrarCalcular, setMostrarCalcular] = useState(false);\n  const [orderChoices, setOrderChoices] = useState([]);\n  const [updatedMatrix, setUpdatedMatrix] = useState([]);\n  let updatedMatrices = [];\n  const handleMatrixUpdate = (updatedMatrix, matrixId) => {\n    // Obtén el índice de la matriz que se actualizó\n\n    let indices = [\"ponderacion\", \"originalMatrix\"];\n    for (let i = 2; i < matrices.length; i++) {\n      indices.push(`comAlt${i}`);\n    }\n    for (let i = 0; i < indices.length; i++) {\n      if (indices[i] === matrixId) {\n        updatedMatrices[i] = updatedMatrix;\n      }\n    }\n  };\n  const blockButtonsInputsSelects = () => {\n    const buttons = document.querySelectorAll(\"button\");\n    buttons.forEach(button => {\n      button.disabled = true;\n      button.classList.add(\"disabled\"); // Aplicar estilos para indicar que están deshabilitadas\n    });\n\n    // Obtener todas las celdas de entrada y deshabilitarlas\n    const inputs = document.querySelectorAll(\"input\");\n    inputs.forEach(input => {\n      input.disabled = true;\n      input.classList.add(\"disabled\"); // Aplicar estilos para indicar que están deshabilitadas\n    });\n\n    // Obtener todas las listas deshabilitarlas\n    const selects = document.querySelectorAll(\"select\");\n    selects.forEach(select => {\n      select.disabled = true;\n      select.classList.add(\"disabled\"); // Aplicar estilos para indicar que están deshabilitadas\n    });\n  };\n\n  const unblockButtonsInputsSelects = () => {\n    // Habilitar botones\n    const buttons = document.querySelectorAll(\"button\");\n    buttons.forEach(button => {\n      button.disabled = false;\n      button.classList.remove(\"disabled\"); // Aplicar estilos para indicar que están deshabilitadas\n    });\n\n    // Habilitar todas las celdas de entrada y quitar los estilos de deshabilitado\n    const inputs = document.querySelectorAll(\"input\");\n    inputs.forEach(input => {\n      input.disabled = false;\n      input.classList.remove(\"disabled\");\n    });\n\n    // Habilitar todas las listas y quitar los estilos de deshabilitado\n    const selects = document.querySelectorAll(\"select\");\n    selects.forEach(select => {\n      select.disabled = false;\n      select.classList.remove(\"disabled\");\n    });\n  };\n  const emptySpaces = () => {\n    const inputs = document.querySelectorAll(\"input\");\n    for (let i = 0; i < inputs.length; i++) {\n      if (inputs[i].value.trim() === \"\") {\n        return true; // Hay un campo vacío\n      }\n    }\n\n    return false; // No hay campos vacíos\n  };\n\n  const isThereAZero = () => {\n    const inputs = document.querySelectorAll(\"input\");\n    for (let i = 0; i < inputs.length; i++) {\n      if (inputs[i].value.trim() === \"0\") {\n        return true; // Hay un campo vacío\n      }\n    }\n\n    return false; // No hay campos vacíos\n  };\n\n  const ponderacionCheck = () => {\n    const sum = updatedMatrices[0][0].reduce((Suma, a) => Suma + a * 1, 0);\n    if (sum !== 1) {\n      return true; // Los pesos de los criterios no suman 100%\n    }\n\n    return false; // Sí suman 100%\n  };\n\n  const handleEstablecerClick = () => {\n    if (emptySpaces()) {\n      // Puedes mostrar un mensaje de error, no ejecutar la función, o realizar alguna acción adecuada\n      alert(\"Por favor, completa todos los campos antes de continuar.\");\n      return; // No ejecutar más allá si hay un campo vacío\n    }\n\n    namesCriterios.splice(numCriterios);\n    namesAlternativas.splice(numAlternativas);\n    const matrizPrincipal = Array.from({\n      length: numAlternativas\n    }, () => Array(numCriterios).fill(\"\"));\n    setMatrices([matrizPrincipal]);\n    const matrizPrincipalTitle = \"Matriz de elavuación de alternativas con respecto a los criterios\";\n\n    // Establece el título de la matriz principal\n\n    //Prepara el estado de la tendecia de los criterios según cuántos hayan de éstos\n    const order = [];\n    for (let i = 1; i <= numCriterios; i++) {\n      order.push(\"Creciente\");\n    }\n    setOrderChoices(order);\n    setMatricesTitles([matrizPrincipalTitle]);\n    setMostrarCalcular(true);\n    blockButtonsInputsSelects();\n  };\n\n  // Función para manejar los cambios en la elección de la tendecia de los criterios\n  const handleOrderChange = (index, value) => {\n    const newOrderChoices = [...orderChoices];\n    newOrderChoices[index] = value;\n    setOrderChoices(newOrderChoices);\n  };\n  const handleCalcularClick = () => {\n    if (emptySpaces()) {\n      // Puedes mostrar un mensaje de error, no ejecutar la función, o realizar alguna acción adecuada\n      alert(\"Por favor, ingresa todos los valores para continuar.\");\n      return; // No ejecutar más allá si hay un campo vacío\n    }\n\n    if (isThereAZero()) {\n      // Puedes mostrar un mensaje de error, no ejecutar la función, o realizar alguna acción adecuada\n      alert(\"Por favor, revisa tus valores ingresados, el 0 no es un valor válido.\");\n      return; // No ejecutar más allá si hay un campo vacío\n    }\n\n    if (ponderacionCheck()) {\n      // Puedes mostrar un mensaje de error, no ejecutar la función, o realizar alguna acción adecuada\n      alert(\"Por favor, revisa las ponderaciones de los criterios, deben sumar 1.\");\n      return; // No ejecutar más allá si no suman 1\n    }\n\n    updatedMatrices.forEach(matriz => {\n      matriz.forEach(fila => {\n        for (let i = 0; i < fila.length; i++) {\n          fila[i] = parseFraction(fila[i]);\n        }\n      });\n    });\n    setUpdatedMatrix(updatedMatrices);\n    setMostrarMatrixOperations(true);\n    blockButtonsInputsSelects();\n    console.log(updatedMatrices[0][0]);\n  };\n  const resetTOPSIS = () => {\n    setNumCriterios(2);\n    setNumAlternativas(2);\n    setMatrices([]);\n    setMostrarMatrixOperations(false);\n    setNamesCriterios([]);\n    setNamesAlternativas([]);\n    setMatricesTitles(\"\");\n    setMostrarCalcular(false);\n    unblockButtonsInputsSelects();\n    updatedMatrices = [];\n    const inputs = document.querySelectorAll(\"input\");\n    // Iterar sobre los elementos input y establecer sus valores a una cadena vacía\n    for (let i = 0; i < inputs.length; i++) {\n      inputs[i].value = \"\";\n    }\n  };\n  const resetCalcular = () => {\n    unblockButtonsInputsSelects();\n    setMatrices([]);\n    updatedMatrices = [];\n    setMostrarMatrixOperations(false);\n    setMostrarCalcular(false);\n    setTimeout(() => {\n      handleEstablecerClick();\n    }, 0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"M\\xE9todo TOPSIS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"N\\xFAmero de Criterios:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: numCriterios,\n        onChange: e => setNumCriterios(parseInt(e.target.value, 10)),\n        children: [2, 3, 4, 5].map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: option,\n          children: option\n        }, option, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"N\\xFAmero de Alternativas:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: numAlternativas,\n        onChange: e => setNumAlternativas(parseInt(e.target.value, 10)),\n        children: [2, 3, 4, 5].map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: option,\n          children: option\n        }, option, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CriterosAlternativas, {\n        numAlternativas: numAlternativas,\n        numCriterios: numCriterios,\n        setNamesCriterios: setNamesCriterios,\n        setNamesAlternativas: setNamesAlternativas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleEstablecerClick,\n          children: \"Establecer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), mostrarCalcular && /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Orden de los criterios\"]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(OrderTable, {\n          namesCriterios: namesCriterios,\n          orderChoices: orderChoices,\n          handleOrderChange: handleOrderChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Ponderación de los criterios\"]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MatrixTOPSIS, {\n          namesCriterios: namesCriterios,\n          namesAlternativas: [],\n          sizeRow: 1,\n          sizeCol: numCriterios,\n          id: \"ponderacion\",\n          onUpdate: updatedMatrix => handleMatrixUpdate(updatedMatrix, \"ponderacion\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }, this), matrices.map((matrix, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: matricesTitles[index]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(MatrixTOPSIS, {\n            namesCriterios: namesCriterios,\n            namesAlternativas: namesAlternativas,\n            sizeRow: numAlternativas,\n            sizeCol: numCriterios,\n            size: matrix.length,\n            id: \"originalMatrix\",\n            onUpdate: updatedMatrix => handleMatrixUpdate(updatedMatrix, \"originalMatrix\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCalcularClick,\n          children: \"Calcular\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setMostrarCalcular(false);\n            unblockButtonsInputsSelects();\n            setNamesCriterios([]);\n            setNamesAlternativas([]);\n            setMatricesTitles(\"\");\n            const inputs = document.querySelectorAll(\"input\");\n            // Iterar sobre los elementos input y establecer sus valores a una cadena vacía\n            for (let i = 0; i < inputs.length; i++) {\n              inputs[i].value = \"\";\n            }\n          },\n          children: \"Regresar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }, this), mostrarMatrixOperations && /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MatrixOperationsTOPSIS, {\n        namesCriterios: namesCriterios,\n        namesAlternativas: namesAlternativas,\n        numCriterios: numCriterios,\n        numAlternativas: numAlternativas,\n        updatedMatrix: updatedMatrix,\n        orderChoices: orderChoices\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetTOPSIS,\n          children: \"Reiniciar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetCalcular,\n          children: \"Regresar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 9\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 5\n  }, this);\n};\n_s(TOPSIS, \"rdXDo+iWxceMd9zNz6ts/tsVxk0=\");\n_c = TOPSIS;\nexport default TOPSIS;\nvar _c;\n$RefreshReg$(_c, \"TOPSIS\");","map":{"version":3,"names":["React","useState","MatrixTOPSIS","parseFraction","CriterosAlternativas","OrderTable","MatrixOperationsTOPSIS","jsxDEV","_jsxDEV","TOPSIS","_s","numCriterios","setNumCriterios","numAlternativas","setNumAlternativas","matrices","setMatrices","mostrarMatrixOperations","setMostrarMatrixOperations","namesCriterios","setNamesCriterios","namesAlternativas","setNamesAlternativas","matricesTitles","setMatricesTitles","mostrarCalcular","setMostrarCalcular","orderChoices","setOrderChoices","updatedMatrix","setUpdatedMatrix","updatedMatrices","handleMatrixUpdate","matrixId","indices","i","length","push","blockButtonsInputsSelects","buttons","document","querySelectorAll","forEach","button","disabled","classList","add","inputs","input","selects","select","unblockButtonsInputsSelects","remove","emptySpaces","value","trim","isThereAZero","ponderacionCheck","sum","reduce","Suma","a","handleEstablecerClick","alert","splice","matrizPrincipal","Array","from","fill","matrizPrincipalTitle","order","handleOrderChange","index","newOrderChoices","handleCalcularClick","matriz","fila","console","log","resetTOPSIS","resetCalcular","setTimeout","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","parseInt","target","map","option","onClick","Fragment","sizeRow","sizeCol","id","onUpdate","matrix","size","_c","$RefreshReg$"],"sources":["/home/phoenix/Documentos/2023 II/Multi-criteria-decision-analysis-method/src/components/topsis/topsis.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport MatrixTOPSIS from \"../matrixTOPSIS/matrixTOPSIS\";\nimport { parseFraction } from \"../matrixTOPSIS/matrixTOPSIS\";\nimport CriterosAlternativas from \"../criterosAlternativas/criterosAlternativas\";\nimport OrderTable from \"../tendencyTable/tendencyTable\";\nimport MatrixOperationsTOPSIS from \"../matrixOperationsTOPSIS/matrixOperationsTOPSIS\";\n\nconst TOPSIS = () => {\n  const [numCriterios, setNumCriterios] = useState(2);\n  const [numAlternativas, setNumAlternativas] = useState(2);\n  const [matrices, setMatrices] = useState([]);\n  const [mostrarMatrixOperations, setMostrarMatrixOperations] = useState(false);\n  const [namesCriterios, setNamesCriterios] = useState([]);\n  const [namesAlternativas, setNamesAlternativas] = useState([]);\n  const [matricesTitles, setMatricesTitles] = useState(\"\");\n  const [mostrarCalcular, setMostrarCalcular] = useState(false);\n  const [orderChoices, setOrderChoices] = useState([]);\n  const [updatedMatrix, setUpdatedMatrix] = useState([]);\n\n  let updatedMatrices = [];\n\n  const handleMatrixUpdate = (updatedMatrix, matrixId) => {\n    // Obtén el índice de la matriz que se actualizó\n\n    let indices = [\"ponderacion\", \"originalMatrix\"];\n    for (let i = 2; i < matrices.length; i++) {\n      indices.push(`comAlt${i}`);\n    }\n\n    for (let i = 0; i < indices.length; i++) {\n      if (indices[i] === matrixId) {\n        updatedMatrices[i] = updatedMatrix;\n      }\n    }\n  };\n\n  const blockButtonsInputsSelects = () => {\n    const buttons = document.querySelectorAll(\"button\");\n    buttons.forEach((button) => {\n      button.disabled = true;\n      button.classList.add(\"disabled\"); // Aplicar estilos para indicar que están deshabilitadas\n    });\n\n    // Obtener todas las celdas de entrada y deshabilitarlas\n    const inputs = document.querySelectorAll(\"input\");\n    inputs.forEach((input) => {\n      input.disabled = true;\n      input.classList.add(\"disabled\"); // Aplicar estilos para indicar que están deshabilitadas\n    });\n\n    // Obtener todas las listas deshabilitarlas\n    const selects = document.querySelectorAll(\"select\");\n    selects.forEach((select) => {\n      select.disabled = true;\n      select.classList.add(\"disabled\"); // Aplicar estilos para indicar que están deshabilitadas\n    });\n  };\n\n  const unblockButtonsInputsSelects = () => {\n    // Habilitar botones\n    const buttons = document.querySelectorAll(\"button\");\n    buttons.forEach((button) => {\n      button.disabled = false;\n      button.classList.remove(\"disabled\"); // Aplicar estilos para indicar que están deshabilitadas\n    });\n\n    // Habilitar todas las celdas de entrada y quitar los estilos de deshabilitado\n    const inputs = document.querySelectorAll(\"input\");\n    inputs.forEach((input) => {\n      input.disabled = false;\n      input.classList.remove(\"disabled\");\n    });\n\n    // Habilitar todas las listas y quitar los estilos de deshabilitado\n    const selects = document.querySelectorAll(\"select\");\n    selects.forEach((select) => {\n      select.disabled = false;\n      select.classList.remove(\"disabled\");\n    });\n  };\n\n  const emptySpaces = () => {\n    const inputs = document.querySelectorAll(\"input\");\n\n    for (let i = 0; i < inputs.length; i++) {\n      if (inputs[i].value.trim() === \"\") {\n        return true; // Hay un campo vacío\n      }\n    }\n\n    return false; // No hay campos vacíos\n  };\n\n  const isThereAZero = () => {\n    const inputs = document.querySelectorAll(\"input\");\n\n    for (let i = 0; i < inputs.length; i++) {\n      if (inputs[i].value.trim() === \"0\") {\n        return true; // Hay un campo vacío\n      }\n    }\n\n    return false; // No hay campos vacíos\n  };\n\n  const ponderacionCheck = () => {\n    const sum = updatedMatrices[0][0].reduce((Suma, a) => Suma + a * 1, 0);\n\n    if (sum !== 1) {\n      return true; // Los pesos de los criterios no suman 100%\n    }\n\n    return false; // Sí suman 100%\n  };\n\n  const handleEstablecerClick = () => {\n    if (emptySpaces()) {\n      // Puedes mostrar un mensaje de error, no ejecutar la función, o realizar alguna acción adecuada\n      alert(\"Por favor, completa todos los campos antes de continuar.\");\n      return; // No ejecutar más allá si hay un campo vacío\n    }\n\n    namesCriterios.splice(numCriterios);\n    namesAlternativas.splice(numAlternativas);\n\n    const matrizPrincipal = Array.from({ length: numAlternativas }, () =>\n      Array(numCriterios).fill(\"\")\n    );\n\n    setMatrices([matrizPrincipal]);\n\n    const matrizPrincipalTitle =\n      \"Matriz de elavuación de alternativas con respecto a los criterios\";\n\n    // Establece el título de la matriz principal\n\n    //Prepara el estado de la tendecia de los criterios según cuántos hayan de éstos\n    const order = [];\n    for (let i = 1; i <= numCriterios; i++) {\n      order.push(\"Creciente\");\n    }\n    setOrderChoices(order);\n\n    setMatricesTitles([matrizPrincipalTitle]);\n    setMostrarCalcular(true);\n    blockButtonsInputsSelects();\n  };\n\n  // Función para manejar los cambios en la elección de la tendecia de los criterios\n  const handleOrderChange = (index, value) => {\n    const newOrderChoices = [...orderChoices];\n    newOrderChoices[index] = value;\n    setOrderChoices(newOrderChoices);\n  };\n\n  const handleCalcularClick = () => {\n    if (emptySpaces()) {\n      // Puedes mostrar un mensaje de error, no ejecutar la función, o realizar alguna acción adecuada\n      alert(\"Por favor, ingresa todos los valores para continuar.\");\n      return; // No ejecutar más allá si hay un campo vacío\n    }\n\n    if (isThereAZero()) {\n      // Puedes mostrar un mensaje de error, no ejecutar la función, o realizar alguna acción adecuada\n      alert(\n        \"Por favor, revisa tus valores ingresados, el 0 no es un valor válido.\"\n      );\n      return; // No ejecutar más allá si hay un campo vacío\n    }\n\n    if (ponderacionCheck()) {\n      // Puedes mostrar un mensaje de error, no ejecutar la función, o realizar alguna acción adecuada\n      alert(\n        \"Por favor, revisa las ponderaciones de los criterios, deben sumar 1.\"\n      );\n      return; // No ejecutar más allá si no suman 1\n    }\n\n    updatedMatrices.forEach((matriz) => {\n      matriz.forEach((fila) => {\n        for (let i = 0; i < fila.length; i++) {\n          fila[i] = parseFraction(fila[i]);\n        }\n      });\n    });\n\n    setUpdatedMatrix(updatedMatrices);\n    setMostrarMatrixOperations(true);\n    blockButtonsInputsSelects();\n    console.log(updatedMatrices[0][0]);\n  };\n\n  const resetTOPSIS = () => {\n    setNumCriterios(2);\n    setNumAlternativas(2);\n    setMatrices([]);\n    setMostrarMatrixOperations(false);\n    setNamesCriterios([]);\n    setNamesAlternativas([]);\n    setMatricesTitles(\"\");\n    setMostrarCalcular(false);\n    unblockButtonsInputsSelects();\n    updatedMatrices = [];\n\n    const inputs = document.querySelectorAll(\"input\");\n    // Iterar sobre los elementos input y establecer sus valores a una cadena vacía\n    for (let i = 0; i < inputs.length; i++) {\n      inputs[i].value = \"\";\n    }\n  };\n\n  const resetCalcular = () => {\n    unblockButtonsInputsSelects();\n    setMatrices([]);\n    updatedMatrices = [];\n    setMostrarMatrixOperations(false);\n    setMostrarCalcular(false);\n\n    setTimeout(() => {\n      handleEstablecerClick();\n    }, 0);\n  };\n\n  return (\n    <div>\n      <h1>Método TOPSIS</h1>\n      <div>\n        <label>Número de Criterios:</label>\n        <select\n          value={numCriterios}\n          onChange={(e) => setNumCriterios(parseInt(e.target.value, 10))}\n        >\n          {[2, 3, 4, 5].map((option) => (\n            <option key={option} value={option}>\n              {option}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div>\n        <label>Número de Alternativas:</label>\n        <select\n          value={numAlternativas}\n          onChange={(e) => setNumAlternativas(parseInt(e.target.value, 10))}\n        >\n          {[2, 3, 4, 5].map((option) => (\n            <option key={option} value={option}>\n              {option}\n            </option>\n          ))}\n        </select>\n        <CriterosAlternativas\n          numAlternativas={numAlternativas}\n          numCriterios={numCriterios}\n          setNamesCriterios={setNamesCriterios}\n          setNamesAlternativas={setNamesAlternativas}\n        />\n        <div>\n          <button onClick={handleEstablecerClick}>Establecer</button>\n        </div>\n      </div>\n      {mostrarCalcular && (\n        <React.Fragment>\n          <div>\n            <h2>{[\"Orden de los criterios\"]}</h2>\n            <OrderTable\n              namesCriterios={namesCriterios}\n              orderChoices={orderChoices}\n              handleOrderChange={handleOrderChange}\n            />\n            <h2>{[\"Ponderación de los criterios\"]}</h2>\n            <MatrixTOPSIS\n              namesCriterios={namesCriterios}\n              namesAlternativas={[]}\n              sizeRow={1}\n              sizeCol={numCriterios}\n              id={\"ponderacion\"}\n              onUpdate={(updatedMatrix) =>\n                handleMatrixUpdate(updatedMatrix, \"ponderacion\")\n              }\n            />\n            {matrices.map((matrix, index) => (\n              <div key={index}>\n                <h2>{matricesTitles[index]}</h2>\n                <MatrixTOPSIS\n                  namesCriterios={namesCriterios}\n                  namesAlternativas={namesAlternativas}\n                  sizeRow={numAlternativas}\n                  sizeCol={numCriterios}\n                  size={matrix.length}\n                  id={\"originalMatrix\"}\n                  onUpdate={(updatedMatrix) =>\n                    handleMatrixUpdate(updatedMatrix, \"originalMatrix\")\n                  }\n                />\n              </div>\n            ))}\n          </div>\n          <div>\n            <button onClick={handleCalcularClick}>Calcular</button>\n            <button\n              onClick={() => {\n                setMostrarCalcular(false);\n                unblockButtonsInputsSelects();\n                setNamesCriterios([]);\n                setNamesAlternativas([]);\n                setMatricesTitles(\"\");\n                const inputs = document.querySelectorAll(\"input\");\n                // Iterar sobre los elementos input y establecer sus valores a una cadena vacía\n                for (let i = 0; i < inputs.length; i++) {\n                  inputs[i].value = \"\";\n                }\n              }}\n            >\n              Regresar\n            </button>\n          </div>\n        </React.Fragment>\n      )}\n      {mostrarMatrixOperations && (\n        <React.Fragment>\n          <MatrixOperationsTOPSIS\n            namesCriterios={namesCriterios}\n            namesAlternativas={namesAlternativas}\n            numCriterios={numCriterios}\n            numAlternativas={numAlternativas}\n            updatedMatrix={updatedMatrix}\n            orderChoices={orderChoices}\n          />\n          <div>\n            <button onClick={resetTOPSIS}>Reiniciar</button>\n            <button onClick={resetCalcular}>Regresar</button>\n          </div>\n        </React.Fragment>\n      )}{\" \"}\n      {/* Pasa las matrices a MatrixOperations */}\n    </div>\n  );\n};\n\nexport default TOPSIS;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}