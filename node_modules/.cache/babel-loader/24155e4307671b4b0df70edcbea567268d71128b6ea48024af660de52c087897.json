{"ast":null,"code":"var _jsxFileName = \"/home/phoenix/Documentos/2023 II/Multi-criteria-decision-analysis-method/src/components/matrixOperationsTOPSIS/matrixOperationsTOPSIS.js\";\nimport React from \"react\";\nimport ResultsTOPSIS from \"../../resultsTOPSIS/resultsTOPSIS\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MatrixOperationsTOPSIS = ({\n  updatedMatrix,\n  numCriterios,\n  numAlternativas,\n  namesAlternativas,\n  namesCriterios,\n  orderChoices\n}) => {\n  //Norma de las columas, por criterio\n  const normaVector = [];\n  //Copia de las matrices ingresadas\n  let resultados = updatedMatrix.map(row => [...row]);\n\n  //Ceros para iniciar la cuenta de las normas\n  for (let i = 0; i < numCriterios; i++) {\n    normaVector.push(0);\n  }\n\n  //Se calculas las normas según los criterios\n  for (let i = 0; i < numCriterios; i++) {\n    resultados[1].forEach(fila => {\n      normaVector[i] = normaVector[i] + fila[i] ** 2;\n    });\n    normaVector[i] = Math.sqrt(normaVector[i]);\n  }\n  resultados[1].forEach(fila => {\n    for (let i = 0; i < numCriterios; i++) {\n      fila[i] = fila[i] / normaVector[i]; //Normalización de la matriz de decisión\n      fila[i] = fila[i] * resultados[0][0][i]; //Creación de la matriz normaliza ponderada\n    }\n  });\n\n  const columnas = []; //Ordenar por criterios\n  const ideales = [];\n  const antiIdeales = [];\n  for (let i = 0; i < numCriterios; i++) {\n    columnas.push([]);\n  }\n  resultados[1].forEach(fila => {\n    for (let i = 0; i < numCriterios; i++) {\n      columnas[i].push(fila[i]); //Organiza por criterio\n    }\n  });\n\n  for (let i = 0; i < numCriterios; i++) {\n    let mayor = Math.max(...columnas[i]); //Mayor por criterio\n    let menor = Math.min(...columnas[i]); //Menor por criterio\n    if (orderChoices[i] === \"Creciente\") {\n      //Para comparar el orden del criterio\n      ideales.push(mayor);\n      antiIdeales.push(menor);\n    } else {\n      ideales.push(menor);\n      antiIdeales.push(mayor);\n    }\n  }\n  let distanciaIdeal = [];\n  let distanciaAntiIdeal = [];\n\n  //Ceros para iniciar la cuenta de las distancias\n  for (let i = 0; i < numAlternativas; i++) {\n    distanciaIdeal.push(0);\n    distanciaAntiIdeal.push(0);\n  }\n\n  //Cálculo de las distancias\n  for (let i = 0; i < numAlternativas; i++) {\n    for (let j = 0; j < numCriterios; j++) {\n      distanciaIdeal[i] = distanciaIdeal[i] + (ideales[j] - resultados[1][i][j]) ** 2;\n      distanciaAntiIdeal[i] = distanciaAntiIdeal[i] + (antiIdeales[j] - resultados[1][i][j]) ** 2;\n    }\n    distanciaIdeal[i] = Math.sqrt(distanciaIdeal[i]);\n    distanciaAntiIdeal[i] = Math.sqrt(distanciaAntiIdeal[i]);\n  }\n\n  //Proximidad relativa a la alternativa ideal\n  const ratio = [];\n\n  //Cálculo de esta proximidad por alternativa\n  for (let i = 0; i < numAlternativas; i++) {\n    ratio.push(distanciaAntiIdeal[i] / (distanciaAntiIdeal[i] + distanciaIdeal[i]));\n  }\n  const headers = [\"\", ...namesCriterios];\n  const tableRows = namesAlternativas.map((nombreAlternativa, index) => {\n    const rowData = [{\n      type: \"header\",\n      content: nombreAlternativa\n    }, ...updatedMatrix[1][index].map(valor => ({\n      type: \"data\",\n      content: valor\n    }))];\n    return rowData;\n  });\n\n  // Agregar fila para vectores ideales\n  const idealVectorRow = [{\n    type: \"header\",\n    content: \"Alternativa ideal\"\n  }, ...ideales.map(valor => ({\n    type: \"data\",\n    content: valor\n  }))];\n\n  // Agregar fila para vectores anti-ideales\n  const antiIdealVectorRow = [{\n    type: \"header\",\n    content: \"Alternativa anti-ideal\"\n  }, ...antiIdeales.map(valor => ({\n    type: \"data\",\n    content: valor\n  }))];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Matriz de decisi\\xF3n normalizada ponderada\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: headers.map((header, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: header\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [tableRows.map((rowData, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: rowData.map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: cell.type === \"header\" ? /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: cell.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 21\n            }, this) : cell.content\n          }, `${rowIndex}-${cellIndex}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: idealVectorRow.map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: cell.type === \"header\" ? /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: cell.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 19\n            }, this) : cell.content\n          }, `ideal-${cellIndex}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: antiIdealVectorRow.map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: cell.type === \"header\" ? /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: cell.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 19\n            }, this) : cell.content\n          }, `antiIdeal-${cellIndex}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Medidas de distancia\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Distancia a la alternativa ideal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Distancia a la alternativa anti-ideal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Proximidad relativa a la alternativa ideal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: namesAlternativas.map((nombre, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: nombre\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: distanciaIdeal[index]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: distanciaAntiIdeal[index]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: ratio[index]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultsTOPSIS, {\n      ratio: ratio,\n      namesAlternativas: namesAlternativas\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_c = MatrixOperationsTOPSIS;\nexport default MatrixOperationsTOPSIS;\nvar _c;\n$RefreshReg$(_c, \"MatrixOperationsTOPSIS\");","map":{"version":3,"names":["React","ResultsTOPSIS","jsxDEV","_jsxDEV","MatrixOperationsTOPSIS","updatedMatrix","numCriterios","numAlternativas","namesAlternativas","namesCriterios","orderChoices","normaVector","resultados","map","row","i","push","forEach","fila","Math","sqrt","columnas","ideales","antiIdeales","mayor","max","menor","min","distanciaIdeal","distanciaAntiIdeal","j","ratio","headers","tableRows","nombreAlternativa","index","rowData","type","content","valor","idealVectorRow","antiIdealVectorRow","children","fileName","_jsxFileName","lineNumber","columnNumber","border","header","rowIndex","cell","cellIndex","nombre","_c","$RefreshReg$"],"sources":["/home/phoenix/Documentos/2023 II/Multi-criteria-decision-analysis-method/src/components/matrixOperationsTOPSIS/matrixOperationsTOPSIS.js"],"sourcesContent":["import React from \"react\";\nimport ResultsTOPSIS from \"../../resultsTOPSIS/resultsTOPSIS\";\n\nconst MatrixOperationsTOPSIS = ({\n  updatedMatrix,\n  numCriterios,\n  numAlternativas,\n  namesAlternativas,\n  namesCriterios,\n  orderChoices,\n}) => {\n  //Norma de las columas, por criterio\n  const normaVector = [];\n  //Copia de las matrices ingresadas\n  let resultados = updatedMatrix.map((row) => [...row]);\n\n  //Ceros para iniciar la cuenta de las normas\n  for (let i = 0; i < numCriterios; i++) {\n    normaVector.push(0);\n  }\n\n  //Se calculas las normas según los criterios\n  for (let i = 0; i < numCriterios; i++) {\n    resultados[1].forEach((fila) => {\n      normaVector[i] = normaVector[i] + fila[i] ** 2;\n    });\n    normaVector[i] = Math.sqrt(normaVector[i]);\n  }\n\n  resultados[1].forEach((fila) => {\n    for (let i = 0; i < numCriterios; i++) {\n      fila[i] = fila[i] / normaVector[i]; //Normalización de la matriz de decisión\n      fila[i] = fila[i] * resultados[0][0][i]; //Creación de la matriz normaliza ponderada\n    }\n  });\n\n  const columnas = []; //Ordenar por criterios\n  const ideales = [];\n  const antiIdeales = [];\n\n  for (let i = 0; i < numCriterios; i++) {\n    columnas.push([]);\n  }\n\n  resultados[1].forEach((fila) => {\n    for (let i = 0; i < numCriterios; i++) {\n      columnas[i].push(fila[i]); //Organiza por criterio\n    }\n  });\n\n  for (let i = 0; i < numCriterios; i++) {\n    let mayor = Math.max(...columnas[i]); //Mayor por criterio\n    let menor = Math.min(...columnas[i]); //Menor por criterio\n    if (orderChoices[i] === \"Creciente\") {\n      //Para comparar el orden del criterio\n      ideales.push(mayor);\n      antiIdeales.push(menor);\n    } else {\n      ideales.push(menor);\n      antiIdeales.push(mayor);\n    }\n  }\n\n  let distanciaIdeal = [];\n  let distanciaAntiIdeal = [];\n\n  //Ceros para iniciar la cuenta de las distancias\n  for (let i = 0; i < numAlternativas; i++) {\n    distanciaIdeal.push(0);\n    distanciaAntiIdeal.push(0);\n  }\n\n  //Cálculo de las distancias\n  for (let i = 0; i < numAlternativas; i++) {\n    for (let j = 0; j < numCriterios; j++) {\n      distanciaIdeal[i] =\n        distanciaIdeal[i] + (ideales[j] - resultados[1][i][j]) ** 2;\n      distanciaAntiIdeal[i] =\n        distanciaAntiIdeal[i] + (antiIdeales[j] - resultados[1][i][j]) ** 2;\n    }\n    distanciaIdeal[i] = Math.sqrt(distanciaIdeal[i]);\n    distanciaAntiIdeal[i] = Math.sqrt(distanciaAntiIdeal[i]);\n  }\n\n  //Proximidad relativa a la alternativa ideal\n  const ratio = [];\n\n  //Cálculo de esta proximidad por alternativa\n  for (let i = 0; i < numAlternativas; i++) {\n    ratio.push(\n      distanciaAntiIdeal[i] / (distanciaAntiIdeal[i] + distanciaIdeal[i])\n    );\n  }\n\n  const headers = [\"\", ...namesCriterios];\n\n  const tableRows = namesAlternativas.map((nombreAlternativa, index) => {\n    const rowData = [\n      { type: \"header\", content: nombreAlternativa },\n      ...updatedMatrix[1][index].map((valor) => ({\n        type: \"data\",\n        content: valor,\n      })),\n    ];\n\n    return rowData;\n  });\n\n  // Agregar fila para vectores ideales\n  const idealVectorRow = [\n    { type: \"header\", content: \"Alternativa ideal\" },\n    ...ideales.map((valor) => ({ type: \"data\", content: valor })),\n  ];\n\n  // Agregar fila para vectores anti-ideales\n  const antiIdealVectorRow = [\n    { type: \"header\", content: \"Alternativa anti-ideal\" },\n    ...antiIdeales.map((valor) => ({ type: \"data\", content: valor })),\n  ];\n\n  return (\n    <div>\n      <h2>Matriz de decisión normalizada ponderada</h2>\n      <table border=\"1\">\n        <thead>\n          <tr>\n            {headers.map((header, index) => (\n              <th key={index}>{header}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {tableRows.map((rowData, rowIndex) => (\n            <tr key={rowIndex}>\n              {rowData.map((cell, cellIndex) => (\n                <td key={`${rowIndex}-${cellIndex}`}>\n                  {cell.type === \"header\" ? (\n                    <strong>{cell.content}</strong>\n                  ) : (\n                    cell.content\n                  )}\n                </td>\n              ))}\n            </tr>\n          ))}\n          {/* Agregar filas para vectores ideales y anti-ideales */}\n          <tr>\n            {idealVectorRow.map((cell, cellIndex) => (\n              <td key={`ideal-${cellIndex}`}>\n                {cell.type === \"header\" ? (\n                  <strong>{cell.content}</strong>\n                ) : (\n                  cell.content\n                )}\n              </td>\n            ))}\n          </tr>\n          <tr>\n            {antiIdealVectorRow.map((cell, cellIndex) => (\n              <td key={`antiIdeal-${cellIndex}`}>\n                {cell.type === \"header\" ? (\n                  <strong>{cell.content}</strong>\n                ) : (\n                  cell.content\n                )}\n              </td>\n            ))}\n          </tr>\n        </tbody>\n      </table>\n      <h2>Medidas de distancia</h2>\n      <table border=\"1\">\n        <thead>\n          <tr>\n            <th></th>\n            <th>Distancia a la alternativa ideal</th>\n            <th>Distancia a la alternativa anti-ideal</th>\n            <th>Proximidad relativa a la alternativa ideal</th>\n          </tr>\n        </thead>\n        <tbody>\n          {namesAlternativas.map((nombre, index) => (\n            <tr key={index}>\n              <td>{nombre}</td>\n              <td>{distanciaIdeal[index]}</td>\n              <td>{distanciaAntiIdeal[index]}</td>\n              <td>{ratio[index]}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <ResultsTOPSIS ratio={ratio} namesAlternativas={namesAlternativas} />\n    </div>\n  );\n};\n\nexport default MatrixOperationsTOPSIS;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}