{"ast":null,"code":"var _jsxFileName = \"/home/phoenix/Documentos/2023 II/Multi-criteria-decision-analysis-method/src/components/ahp/ahp.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport MatrixAHP from \"../matrixAHP/matrixAHP.js\";\nimport { parseFraction } from \"../matrixAHP/matrixAHP\";\nimport MatrixOperationsAHP from \"../matrixOperationsAHP/matrixOperationsAHP\";\nimport CriterosAlternativas from \"../criterosAlternativas/criterosAlternativas\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AHP = () => {\n  _s();\n  const [numCriterios, setNumCriterios] = useState(2);\n  const [numAlternativas, setNumAlternativas] = useState(2);\n  const [matrices, setMatrices] = useState([]);\n  const [mostrarMatrixOperations, setMostrarMatrixOperations] = useState(false);\n  const [namesCriterios, setNamesCriterios] = useState([]);\n  const [namesAlternativas, setNamesAlternativas] = useState([]);\n  const [matricesTitles, setMatricesTitles] = useState(\"\");\n  const [mostrarCalcular, setMostrarCalcular] = useState(false);\n  let updatedMatrices = [];\n  const handleMatrixUpdate = (updatedMatrix, matrixId) => {\n    // Obtén el índice de la matriz que se actualizó\n\n    let indices = [\"comCri\"];\n    for (let i = 1; i < matrices.length; i++) {\n      indices.push(`comAlt${i}`);\n    }\n    for (let i = 0; i < matrices.length; i++) {\n      if (indices[i] === matrixId) {\n        updatedMatrices[i] = updatedMatrix;\n      }\n    }\n\n    // Copia el estado actual de matrices\n    //const updatedMatrices = [...matrices];\n\n    // Reemplaza la matriz actualizada en el arreglo de matrices\n    //updatedMatrices[matrixIndex] = updatedMatrix;\n\n    // Actualiza el estado matrices con las matrices actualizadas\n    //setMatrices(updatedMatrices);\n  };\n\n  const blockButtonsInputsSelects = () => {\n    const buttons = document.querySelectorAll(\"button\");\n    buttons.forEach(button => {\n      button.disabled = true;\n      button.classList.add(\"disabled\"); // Aplicar estilos para indicar que están deshabilitadas\n    });\n\n    // Obtener todas las celdas de entrada y deshabilitarlas\n    const inputs = document.querySelectorAll(\"input\");\n    inputs.forEach(input => {\n      input.disabled = true;\n      input.classList.add(\"disabled\"); // Aplicar estilos para indicar que están deshabilitadas\n    });\n\n    // Obtener todas las listas deshabilitarlas\n    const selects = document.querySelectorAll(\"select\");\n    selects.forEach(select => {\n      select.disabled = true;\n      select.classList.add(\"disabled\"); // Aplicar estilos para indicar que están deshabilitadas\n    });\n  };\n\n  const unblockButtonsInputsSelects = () => {\n    // Habilitar botones\n    const buttons = document.querySelectorAll(\"button\");\n    buttons.forEach(button => {\n      button.disabled = false;\n      button.classList.remove(\"disabled\"); // Aplicar estilos para indicar que están deshabilitadas\n    });\n\n    // Habilitar todas las celdas de entrada y quitar los estilos de deshabilitado\n    const inputs = document.querySelectorAll(\"input\");\n    inputs.forEach(input => {\n      input.disabled = false;\n      input.classList.remove(\"disabled\");\n    });\n\n    // Habilitar todas las listas y quitar los estilos de deshabilitado\n    const selects = document.querySelectorAll(\"select\");\n    selects.forEach(select => {\n      select.disabled = false;\n      select.classList.remove(\"disabled\");\n    });\n  };\n  const emptySpaces = () => {\n    const inputs = document.querySelectorAll(\"input\");\n    for (let i = 0; i < inputs.length; i++) {\n      if (inputs[i].value.trim() === \"\") {\n        return true; // Hay un campo vacío\n      }\n    }\n\n    return false; // No hay campos vacíos\n  };\n\n  const isThereAZero = () => {\n    const inputs = document.querySelectorAll(\"input\");\n    for (let i = 0; i < inputs.length; i++) {\n      if (inputs[i].value.trim() === \"0\") {\n        return true; // Hay un campo vacío\n      }\n    }\n\n    return false; // No hay campos vacíos\n  };\n\n  const handleEstablecerClick = () => {\n    if (emptySpaces()) {\n      // Puedes mostrar un mensaje de error, no ejecutar la función, o realizar alguna acción adecuada\n      alert(\"Por favor, completa todos los campos antes de continuar.\");\n      return; // No ejecutar más allá si hay un campo vacío\n    }\n\n    const matrizPrincipal = Array.from({\n      length: numCriterios\n    }, () => Array(numCriterios).fill(1));\n    const matricesAlternativas = Array.from({\n      length: numCriterios\n    }, () => Array(numAlternativas).fill(\"\"));\n    setMatrices([matrizPrincipal, ...matricesAlternativas]);\n    const matrizPrincipalTitle = \"Matriz de comparación de criterios\";\n\n    // Genera títulos para las matrices de valoraciones de cada criterio\n    const criteriosTitles = namesCriterios.map(criterio => {\n      return `Matriz de valoraciones para ${criterio}`;\n    });\n\n    // Establece el título de la matriz principal y los títulos de las matrices de valoraciones\n    setMatricesTitles([matrizPrincipalTitle, ...criteriosTitles]);\n    setMostrarCalcular(true);\n    blockButtonsInputsSelects();\n  };\n  const handleCalcularClick = () => {\n    if (emptySpaces()) {\n      // Puedes mostrar un mensaje de error, no ejecutar la función, o realizar alguna acción adecuada\n      alert(\"Por favor, ingresa todos los valores para continuar.\");\n      return; // No ejecutar más allá si hay un campo vacío\n    }\n\n    if (isThereAZero()) {\n      // Puedes mostrar un mensaje de error, no ejecutar la función, o realizar alguna acción adecuada\n      alert(\"Por favor, revisa tus valores ingresados, el 0 no es un valor válido.\");\n      return; // No ejecutar más allá si hay un campo vacío\n    }\n\n    updatedMatrices.forEach(matriz => {\n      matriz.forEach(fila => {\n        for (let i = 0; i < fila.length; i++) {\n          fila[i] = parseFraction(fila[i]);\n        }\n      });\n    });\n    setMatrices(updatedMatrices);\n    setMostrarMatrixOperations(true);\n    blockButtonsInputsSelects();\n  };\n  const resetAHP = () => {\n    setNumCriterios(2);\n    setNumAlternativas(2);\n    setMatrices([]);\n    setMostrarMatrixOperations(false);\n    setNamesCriterios([]);\n    setNamesAlternativas([]);\n    setMatricesTitles(\"\");\n    setMostrarCalcular(false);\n    unblockButtonsInputsSelects();\n    updatedMatrices = [];\n    const inputs = document.querySelectorAll(\"input\");\n    // Iterar sobre los elementos input y establecer sus valores a una cadena vacía\n    for (let i = 0; i < inputs.length; i++) {\n      inputs[i].value = \"\";\n    }\n  };\n  const resetCalcular = () => {\n    unblockButtonsInputsSelects();\n    setMatrices([]);\n    updatedMatrices = [];\n    setMostrarMatrixOperations(false);\n    setMostrarCalcular(false);\n    setTimeout(() => {\n      handleEstablecerClick();\n    }, 0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"M\\xE9todo AHP\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"N\\xFAmero de Criterios:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: numCriterios,\n        onChange: e => setNumCriterios(parseInt(e.target.value, 10)),\n        children: [2, 3, 4, 5].map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: option,\n          children: option\n        }, option, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"N\\xFAmero de Alternativas:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: numAlternativas,\n        onChange: e => setNumAlternativas(parseInt(e.target.value, 10)),\n        children: [2, 3, 4, 5].map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: option,\n          children: option\n        }, option, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CriterosAlternativas, {\n      numAlternativas: numAlternativas,\n      numCriterios: numCriterios,\n      setNamesCriterios: setNamesCriterios,\n      setNamesAlternativas: setNamesAlternativas\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleEstablecerClick,\n        children: \"Establecer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), mostrarCalcular && /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: matrices.map((matrix, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: matricesTitles[index]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(MatrixAHP, {\n            names: index === 0 ? namesCriterios : namesAlternativas,\n            size: matrix.length,\n            id: index === 0 ? \"comCri\" : `comAlt${index}`,\n            onUpdate: updatedMatrix => handleMatrixUpdate(updatedMatrix, index === 0 ? \"comCri\" : `comAlt${index}`)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCalcularClick,\n          children: \"Calcular\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setMostrarCalcular(false);\n            unblockButtonsInputsSelects();\n            setNamesCriterios([]);\n            setNamesAlternativas([]);\n            setMatricesTitles(\"\");\n            const inputs = document.querySelectorAll(\"input\");\n            // Iterar sobre los elementos input y establecer sus valores a una cadena vacía\n            for (let i = 0; i < inputs.length; i++) {\n              inputs[i].value = \"\";\n            }\n          },\n          children: \"Regresar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }, this), mostrarMatrixOperations && /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MatrixOperationsAHP, {\n        namesCriterios: namesCriterios,\n        namesAlternativas: namesAlternativas,\n        numCriterios: numCriterios,\n        numAlternativas: numAlternativas,\n        matrices: matrices\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetAHP,\n          children: \"Reiniciar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetCalcular,\n          children: \"Regresar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 9\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n};\n_s(AHP, \"sOtZt2Xqq5B545HtKCzXtLfygck=\");\n_c = AHP;\nexport default AHP;\nvar _c;\n$RefreshReg$(_c, \"AHP\");","map":{"version":3,"names":["React","useState","MatrixAHP","parseFraction","MatrixOperationsAHP","CriterosAlternativas","jsxDEV","_jsxDEV","AHP","_s","numCriterios","setNumCriterios","numAlternativas","setNumAlternativas","matrices","setMatrices","mostrarMatrixOperations","setMostrarMatrixOperations","namesCriterios","setNamesCriterios","namesAlternativas","setNamesAlternativas","matricesTitles","setMatricesTitles","mostrarCalcular","setMostrarCalcular","updatedMatrices","handleMatrixUpdate","updatedMatrix","matrixId","indices","i","length","push","blockButtonsInputsSelects","buttons","document","querySelectorAll","forEach","button","disabled","classList","add","inputs","input","selects","select","unblockButtonsInputsSelects","remove","emptySpaces","value","trim","isThereAZero","handleEstablecerClick","alert","matrizPrincipal","Array","from","fill","matricesAlternativas","matrizPrincipalTitle","criteriosTitles","map","criterio","handleCalcularClick","matriz","fila","resetAHP","resetCalcular","setTimeout","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","parseInt","target","option","onClick","Fragment","matrix","index","names","size","id","onUpdate","_c","$RefreshReg$"],"sources":["/home/phoenix/Documentos/2023 II/Multi-criteria-decision-analysis-method/src/components/ahp/ahp.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport MatrixAHP from \"../matrixAHP/matrixAHP.js\";\nimport { parseFraction } from \"../matrixAHP/matrixAHP\";\nimport MatrixOperationsAHP from \"../matrixOperationsAHP/matrixOperationsAHP\";\nimport CriterosAlternativas from \"../criterosAlternativas/criterosAlternativas\";\n\nconst AHP = () => {\n  const [numCriterios, setNumCriterios] = useState(2);\n  const [numAlternativas, setNumAlternativas] = useState(2);\n  const [matrices, setMatrices] = useState([]);\n  const [mostrarMatrixOperations, setMostrarMatrixOperations] = useState(false);\n  const [namesCriterios, setNamesCriterios] = useState([]);\n  const [namesAlternativas, setNamesAlternativas] = useState([]);\n  const [matricesTitles, setMatricesTitles] = useState(\"\");\n  const [mostrarCalcular, setMostrarCalcular] = useState(false);\n  let updatedMatrices = [];\n\n  const handleMatrixUpdate = (updatedMatrix, matrixId) => {\n    // Obtén el índice de la matriz que se actualizó\n\n    let indices = [\"comCri\"];\n    for (let i = 1; i < matrices.length; i++) {\n      indices.push(`comAlt${i}`);\n    }\n\n    for (let i = 0; i < matrices.length; i++) {\n      if (indices[i] === matrixId) {\n        updatedMatrices[i] = updatedMatrix;\n      }\n    }\n\n    // Copia el estado actual de matrices\n    //const updatedMatrices = [...matrices];\n\n    // Reemplaza la matriz actualizada en el arreglo de matrices\n    //updatedMatrices[matrixIndex] = updatedMatrix;\n\n    // Actualiza el estado matrices con las matrices actualizadas\n    //setMatrices(updatedMatrices);\n  };\n\n  const blockButtonsInputsSelects = () => {\n    const buttons = document.querySelectorAll(\"button\");\n    buttons.forEach((button) => {\n      button.disabled = true;\n      button.classList.add(\"disabled\"); // Aplicar estilos para indicar que están deshabilitadas\n    });\n\n    // Obtener todas las celdas de entrada y deshabilitarlas\n    const inputs = document.querySelectorAll(\"input\");\n    inputs.forEach((input) => {\n      input.disabled = true;\n      input.classList.add(\"disabled\"); // Aplicar estilos para indicar que están deshabilitadas\n    });\n\n    // Obtener todas las listas deshabilitarlas\n    const selects = document.querySelectorAll(\"select\");\n    selects.forEach((select) => {\n      select.disabled = true;\n      select.classList.add(\"disabled\"); // Aplicar estilos para indicar que están deshabilitadas\n    });\n  };\n\n  const unblockButtonsInputsSelects = () => {\n    // Habilitar botones\n    const buttons = document.querySelectorAll(\"button\");\n    buttons.forEach((button) => {\n      button.disabled = false;\n      button.classList.remove(\"disabled\"); // Aplicar estilos para indicar que están deshabilitadas\n    });\n\n    // Habilitar todas las celdas de entrada y quitar los estilos de deshabilitado\n    const inputs = document.querySelectorAll(\"input\");\n    inputs.forEach((input) => {\n      input.disabled = false;\n      input.classList.remove(\"disabled\");\n    });\n\n    // Habilitar todas las listas y quitar los estilos de deshabilitado\n    const selects = document.querySelectorAll(\"select\");\n    selects.forEach((select) => {\n      select.disabled = false;\n      select.classList.remove(\"disabled\");\n    });\n  };\n\n  const emptySpaces = () => {\n    const inputs = document.querySelectorAll(\"input\");\n\n    for (let i = 0; i < inputs.length; i++) {\n      if (inputs[i].value.trim() === \"\") {\n        return true; // Hay un campo vacío\n      }\n    }\n\n    return false; // No hay campos vacíos\n  };\n\n  const isThereAZero = () => {\n    const inputs = document.querySelectorAll(\"input\");\n\n    for (let i = 0; i < inputs.length; i++) {\n      if (inputs[i].value.trim() === \"0\") {\n        return true; // Hay un campo vacío\n      }\n    }\n\n    return false; // No hay campos vacíos\n  };\n\n  const handleEstablecerClick = () => {\n    if (emptySpaces()) {\n      // Puedes mostrar un mensaje de error, no ejecutar la función, o realizar alguna acción adecuada\n      alert(\"Por favor, completa todos los campos antes de continuar.\");\n      return; // No ejecutar más allá si hay un campo vacío\n    }\n\n    const matrizPrincipal = Array.from({ length: numCriterios }, () =>\n      Array(numCriterios).fill(1)\n    );\n\n    const matricesAlternativas = Array.from({ length: numCriterios }, () =>\n      Array(numAlternativas).fill(\"\")\n    );\n\n    setMatrices([matrizPrincipal, ...matricesAlternativas]);\n\n    const matrizPrincipalTitle = \"Matriz de comparación de criterios\";\n\n    // Genera títulos para las matrices de valoraciones de cada criterio\n    const criteriosTitles = namesCriterios.map((criterio) => {\n      return `Matriz de valoraciones para ${criterio}`;\n    });\n\n    // Establece el título de la matriz principal y los títulos de las matrices de valoraciones\n    setMatricesTitles([matrizPrincipalTitle, ...criteriosTitles]);\n    setMostrarCalcular(true);\n    blockButtonsInputsSelects();\n  };\n\n  const handleCalcularClick = () => {\n    if (emptySpaces()) {\n      // Puedes mostrar un mensaje de error, no ejecutar la función, o realizar alguna acción adecuada\n      alert(\"Por favor, ingresa todos los valores para continuar.\");\n      return; // No ejecutar más allá si hay un campo vacío\n    }\n\n    if (isThereAZero()) {\n      // Puedes mostrar un mensaje de error, no ejecutar la función, o realizar alguna acción adecuada\n      alert(\n        \"Por favor, revisa tus valores ingresados, el 0 no es un valor válido.\"\n      );\n      return; // No ejecutar más allá si hay un campo vacío\n    }\n\n    updatedMatrices.forEach((matriz) => {\n      matriz.forEach((fila) => {\n        for (let i = 0; i < fila.length; i++) {\n          fila[i] = parseFraction(fila[i]);\n        }\n      });\n    });\n    setMatrices(updatedMatrices);\n    setMostrarMatrixOperations(true);\n    blockButtonsInputsSelects();\n  };\n\n  const resetAHP = () => {\n    setNumCriterios(2);\n    setNumAlternativas(2);\n    setMatrices([]);\n    setMostrarMatrixOperations(false);\n    setNamesCriterios([]);\n    setNamesAlternativas([]);\n    setMatricesTitles(\"\");\n    setMostrarCalcular(false);\n    unblockButtonsInputsSelects();\n    updatedMatrices = [];\n\n    const inputs = document.querySelectorAll(\"input\");\n    // Iterar sobre los elementos input y establecer sus valores a una cadena vacía\n    for (let i = 0; i < inputs.length; i++) {\n      inputs[i].value = \"\";\n    }\n  };\n\n  const resetCalcular = () => {\n    unblockButtonsInputsSelects();\n    setMatrices([]);\n    updatedMatrices = [];\n    setMostrarMatrixOperations(false);\n    setMostrarCalcular(false);\n\n    setTimeout(() => {\n      handleEstablecerClick();\n    }, 0);\n  };\n\n  return (\n    <div>\n      <h1>Método AHP</h1>\n      <div>\n        <label>Número de Criterios:</label>\n        <select\n          value={numCriterios}\n          onChange={(e) => setNumCriterios(parseInt(e.target.value, 10))}\n        >\n          {[2, 3, 4, 5].map((option) => (\n            <option key={option} value={option}>\n              {option}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div>\n        <label>Número de Alternativas:</label>\n        <select\n          value={numAlternativas}\n          onChange={(e) => setNumAlternativas(parseInt(e.target.value, 10))}\n        >\n          {[2, 3, 4, 5].map((option) => (\n            <option key={option} value={option}>\n              {option}\n            </option>\n          ))}\n        </select>\n      </div>\n      <CriterosAlternativas\n        numAlternativas={numAlternativas}\n        numCriterios={numCriterios}\n        setNamesCriterios={setNamesCriterios}\n        setNamesAlternativas={setNamesAlternativas}\n      />\n      <div>\n        <button onClick={handleEstablecerClick}>Establecer</button>\n      </div>\n      {mostrarCalcular && (\n        <React.Fragment>\n          <div>\n            {matrices.map((matrix, index) => (\n              <div key={index}>\n                <h2>{matricesTitles[index]}</h2>\n                <MatrixAHP\n                  names={index === 0 ? namesCriterios : namesAlternativas}\n                  size={matrix.length}\n                  id={index === 0 ? \"comCri\" : `comAlt${index}`}\n                  onUpdate={(updatedMatrix) =>\n                    handleMatrixUpdate(\n                      updatedMatrix,\n                      index === 0 ? \"comCri\" : `comAlt${index}`\n                    )\n                  }\n                />\n              </div>\n            ))}\n          </div>\n          <div>\n            <button onClick={handleCalcularClick}>Calcular</button>\n            <button\n              onClick={() => {\n                setMostrarCalcular(false);\n                unblockButtonsInputsSelects();\n                setNamesCriterios([]);\n                setNamesAlternativas([]);\n                setMatricesTitles(\"\");\n                const inputs = document.querySelectorAll(\"input\");\n                // Iterar sobre los elementos input y establecer sus valores a una cadena vacía\n                for (let i = 0; i < inputs.length; i++) {\n                  inputs[i].value = \"\";\n                }\n              }}\n            >\n              Regresar\n            </button>\n          </div>\n        </React.Fragment>\n      )}\n      {mostrarMatrixOperations && (\n        <React.Fragment>\n          <MatrixOperationsAHP\n            namesCriterios={namesCriterios}\n            namesAlternativas={namesAlternativas}\n            numCriterios={numCriterios}\n            numAlternativas={numAlternativas}\n            matrices={matrices}\n          />\n          <div>\n            <button onClick={resetAHP}>Reiniciar</button>\n            <button onClick={resetCalcular}>Regresar</button>\n          </div>\n        </React.Fragment>\n      )}{\" \"}\n      {/* Pasa las matrices a MatrixOperations */}\n    </div>\n  );\n};\n\nexport default AHP;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}